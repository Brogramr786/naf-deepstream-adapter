(function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{configurable:!1,enumerable:!0,get:d})},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s=0)})([function(a,b,c){'use strict';function d(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var e=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),f=c(1),g=function(){function a(b,c){if(d(this,a),this.rootPath='networked-aframe',this.localId=null,this.appId=null,this.roomId=null,this.peers={},this.occupants={},c=c||window.deepstreamConfig,this.ds=b||window.deepstream,void 0===this.ds)throw new Error('Import https://cdnjs.cloudflare.com/ajax/libs/deepstream.io-client-js/x.x.x/deepstream.js');this.dsUrl=c.url}return e(a,[{key:'setServerUrl',value:function(){}},{key:'setApp',value:function(a){this.appId=a}},{key:'setRoom',value:function(a){this.roomId=a}},{key:'setWebRtcOptions',value:function(a){!1===a.datachannel&&console.warn('DeepstreamWebRtcAdapter.setWebRtcOptions: datachannel must be true.'),!0===a.audio&&console.warn('DeepstreamWebRtcAdapter does not support audio yet.'),!0===a.video&&console.warn('DeepstreamWebRtcAdapter does not support video yet.')}},{key:'setServerConnectListeners',value:function(a,b){this.connectSuccess=a,this.connectFailure=b}},{key:'setRoomOccupantListener',value:function(a){this.occupantListener=a}},{key:'setDataChannelListeners',value:function(a,b,c){this.openListener=a,this.closedListener=b,this.messageListener=c}},{key:'connect',value:function(){var a=this,b=this.ds,c=this.ds(this.dsUrl);this.dsClient=c,c.login({},function(b,c){b?a.startApp(c.id):a.connectFailure()}),c.presence.getAll(function(b){console.log('existing clients',b);for(var c=0;c<b.length;c++)a.clientConnected(b[c])}),c.presence.subscribe(function(b,c){console.log('client presence id',b,'online?',c),c?a.clientConnected(b):a.clientDisconnected(b)})}},{key:'shouldStartConnectionTo',value:function(a){return(this.myRoomJoinTime||0)<=(a?a.roomJoinTime:0)}},{key:'startStreamConnection',value:function(){}},{key:'closeStreamConnection',value:function(){}},{key:'sendData',value:function(a,b,c){this.peers[a].send(b,c)}},{key:'sendDataGuaranteed',value:function(a,b,c){var d=JSON.parse(JSON.stringify(c));this.dsClient.record.getRecord(this.getUserPath(this.localId)).set('data',{to:a,type:b,data:d})}},{key:'broadcastData',value:function(a,b){for(var c in this.peers)this.peers.hasOwnProperty(c)&&this.sendData(c,a,b)}},{key:'broadcastDataGuaranteed',value:function(a,b){for(var c in this.peers)this.peers.hasOwnProperty(c)&&this.sendDataGuaranteed(c,a,b)}},{key:'getConnectStatus',value:function(a){var b=this.peers[a];if(void 0===b)return NAF.adapters.NOT_CONNECTED;switch(b.getStatus()){case f.IS_CONNECTED:return NAF.adapters.IS_CONNECTED;case f.CONNECTING:return NAF.adapters.CONNECTING;case f.NOT_CONNECTED:default:return NAF.adapters.NOT_CONNECTED;}}},{key:'startApp',value:function(a){var b=this,c=this.dsClient;this.localId=a,this.localTimestamp=NAF.utils.now(),c.record.getRecord(this.getUserPath(a)).set({timestamp:this.localTimestamp,signal:'',data:''}),b.connectSuccess(a)}},{key:'clientConnected',value:function(a){console.log('new client',a);var b=this,c=this.dsClient;NAF.connection.isConnected()||console.warn('Trying to make a connection to another client before my client has connected'),c.record.getRecord(this.getUserPath(a)).whenReady(function(d){var e=function(){var e=d.get('timestamp');console.log('remote timestamp',e);var g=new f(b.localId,a,function(a){console.log('setting signal',a),c.record.getRecord(b.getUserPath(b.localId)).set('signal',a)});g.setDatachannelListeners(b.openListener,b.closedListener,b.messageListener),b.peers[a]=g,b.occupants[a]=e,d.subscribe('signal',function(a){console.log('received signal',a);var b=a;null===b||''===b||g.handleSignal(b)}),d.subscribe('data',function(c){console.log('received data',c);var d=c;null===d||''===d||d.to!==b.localId||b.messageListener(a,d.type,d.data)}),console.log('checking to see who should send offer',b.localTimestamp>e,b.localTimestamp===e&&b.localId>a),(b.localTimestamp>e||b.localTimestamp===e&&b.localId>a)&&(console.log('this client is sending offer'),g.offer()),b.occupantListener(b.occupants)};void 0===d.get('timestamp')?d.subscribe('timestamp',e):e(d.get('timestamp'))})}},{key:'clientDisconnected',value:function(){}},{key:'getRootPath',value:function(){return this.rootPath}},{key:'getAppPath',value:function(){return this.getRootPath()+'/'+this.appId}},{key:'getRoomPath',value:function(){return this.getAppPath()+'/'+this.roomId}},{key:'getUserPath',value:function(a){return this.getRoomPath()+'/'+a}},{key:'getSignalPath',value:function(a){return this.getUserPath(a)+'/signal'}},{key:'getDataPath',value:function(a){return this.getUserPath(a)+'/data'}},{key:'getTimestampGenerationPath',value:function(a){return this.getRoomPath()+'/timestamp/'+a}}]),a}();NAF.adapters.register('deepstream',g),a.exports=g},function(a){'use strict';function b(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var c=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),d=function(){function a(c,d,e){b(this,a),this.localId=c,this.remoteId=d,this.sendSignalFunc=e,this.open=!1,this.channelLabel='networked-aframe-channel',this.pc=this.createPeerConnection(),this.channel=null}return c(a,[{key:'setDatachannelListeners',value:function(a,b,c){this.openListener=a,this.closedListener=b,this.messageListener=c}},{key:'offer',value:function(){var a=this;this.setupChannel(this.pc.createDataChannel(this.channelLabel,{reliable:!1})),console.log('creating offer'),this.pc.createOffer(function(b){console.log('created offer'),a.handleSessionDescription(b)},function(a){console.error('WebRtcPeer.offer: '+a)})}},{key:'handleSignal',value:function(a){if(console.log('handleSignal',a),this.localId===a.to&&this.remoteId===a.from)switch(a.type){case'offer':this.handleOffer(a);break;case'answer':this.handleAnswer(a);break;case'candidate':this.handleCandidate(a);break;default:console.error('WebRtcPeer.handleSignal: Unknown signal type '+a.type);}}},{key:'send',value:function(a,b){null===this.channel||'open'!==this.channel.readyState||this.channel.send(JSON.stringify({type:a,data:b}))}},{key:'getStatus',value:function(){if(null===this.channel)return a.NOT_CONNECTED;switch(this.channel.readyState){case'open':return a.IS_CONNECTED;case'connecting':return a.CONNECTING;case'closing':case'closed':default:return a.NOT_CONNECTED;}}},{key:'createPeerConnection',value:function(){var b=this,c=window.RTCPeerConnection||window.webkitRTCPeerConnection||window.mozRTCPeerConnection||window.msRTCPeerConnection;if(void 0===c)throw new Error('WebRtcPeer.createPeerConnection: This browser does not seem to support WebRTC.');var d=new c({iceServers:a.ICE_SERVERS});return d.onicecandidate=function(a){console.log('onicecandidate'),a.candidate&&b.sendSignalFunc({from:b.localId,to:b.remoteId,type:'candidate',sdpMLineIndex:a.candidate.sdpMLineIndex,candidate:a.candidate.candidate})},d.oniceconnectionstatechange=function(){console.log('oniceconnectionstatechange'),b.open&&'disconnected'===d.iceConnectionState&&(b.open=!1,b.closedListener(b.remoteId))},d}},{key:'setupChannel',value:function(a){var b=this;this.channel=a,this.channel.onmessage=function(a){console.log('received data from remote peer');var c=JSON.parse(a.data);b.messageListener(b.remoteId,c.type,c.data)},this.channel.onopen=function(){console.log('connected to a remote peer'),b.open=!0,b.openListener(b.remoteId)},this.channel.onclose=function(){console.log('discnnected to a remote peer'),b.open&&(b.open=!1,b.closedListener(b.remoteId))},this.channel.onerror=function(a){console.error('WebRtcPeer.channel.onerror: '+a)}}},{key:'handleOffer',value:function(a){console.log('handleOffer');var b=this;this.pc.ondatachannel=function(a){b.setupChannel(a.channel)},this.setRemoteDescription(a),this.pc.createAnswer(function(a){b.handleSessionDescription(a)},function(a){console.error('WebRtcPeer.handleOffer: '+a)})}},{key:'handleAnswer',value:function(a){this.setRemoteDescription(a)}},{key:'handleCandidate',value:function(a){var b=this,c=window.RTCIceCandidate||window.webkitRTCIceCandidate||window.mozRTCIceCandidate;this.pc.addIceCandidate(new c(a),function(){},function(a){console.error('WebRtcPeer.handleCandidate: '+a)})}},{key:'handleSessionDescription',value:function(a){console.log('handleSessionDescription',a);this;this.pc.setLocalDescription(a,function(){},function(a){console.error('WebRtcPeer.handleSessionDescription: '+a)}),this.sendSignalFunc({from:this.localId,to:this.remoteId,type:a.type,sdp:a.sdp})}},{key:'setRemoteDescription',value:function(a){var b=this,c=window.RTCSessionDescription||window.webkitRTCSessionDescription||window.mozRTCSessionDescription||window.msRTCSessionDescription;this.pc.setRemoteDescription(new c(a),function(){},function(a){console.error('WebRtcPeer.setRemoteDescription: '+a)})}}]),a}();d.IS_CONNECTED='IS_CONNECTED',d.CONNECTING='CONNECTING',d.NOT_CONNECTED='NOT_CONNECTED',d.ICE_SERVERS=[{urls:'stun:stun.l.google.com:19302'},{urls:'stun:stun1.l.google.com:19302'},{urls:'stun:stun2.l.google.com:19302'},{urls:'stun:stun3.l.google.com:19302'},{urls:'stun:stun4.l.google.com:19302'}],a.exports=d}]);
//# sourceMappingURL=naf-deepstream-adapter.min.js.map